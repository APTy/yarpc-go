// Code generated by thriftrw-go (mostly) and fixed by hand

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package keyvalue

import (
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	"github.com/yarpc/yarpc-go/transport"
	"golang.org/x/net/context"
)

type KeyValue interface {
	GetValue(ctx context.Context, meta yarpc.Meta, key string) (string, yarpc.Meta, error)
	SetValue(ctx context.Context, meta yarpc.Meta, key string, value string) (yarpc.Meta, error)
}

type keyValueClient struct {
	client thrift.Client
}

func NewKeyValueClient(t transport.Outbound) KeyValue {
	return keyValueClient{
		client: thrift.New(thrift.Config{
			Service:  "KeyValue",
			Outbound: t,
			Protocol: protocol.Binary,
		}),
	}
}

func (k keyValueClient) GetValue(ctx context.Context, meta yarpc.Meta, key string) (string, yarpc.Meta, error) {
	args := GetValueArgs{Key: key}
	res, resmeta, err := k.client.Call(ctx, "getValue", &thrift.Request{
		Meta: meta,
		Body: args.ToWire(),
	})
	if err != nil {
		return "", nil, err
	}

	result, err := _GetValueResult_Read(res.Body)
	if err != nil {
		return "", nil, err
	}

	if result.DoesNotExist != nil {
		return "", resmeta, result.DoesNotExist
	}
	return *result.Success, resmeta, nil
}

func (k keyValueClient) SetValue(ctx context.Context, meta yarpc.Meta, key string, value string) (yarpc.Meta, error) {
	args := SetValueArgs{Key: key, Value: value}
	res, resmeta, err := k.client.Call(ctx, "setValue", &thrift.Request{
		Meta: meta,
		Body: args.ToWire(),
	})

	if err != nil {
		return nil, err
	}

	_, err = _SetValueResult_Read(res.Body)
	if err != nil {
		return resmeta, err
	}

	return resmeta, nil
}

type KeyValueHandler struct {
	impl KeyValue
}

func NewKeyValueHandler(impl KeyValue) KeyValueHandler {
	return KeyValueHandler{impl}
}

func (KeyValueHandler) Name() string {
	return "KeyValue"
}

func (KeyValueHandler) Protocol() protocol.Protocol {
	return protocol.Binary
}

func (k KeyValueHandler) Handlers() map[string]thrift.Handler {
	return map[string]thrift.Handler{
		"getValue": thrift.HandlerFunc(k.GetValueHandler),
		"setValue": thrift.HandlerFunc(k.SetValueHandler),
	}
}

func (k KeyValueHandler) GetValueHandler(ctx context.Context, req *thrift.Request) (*thrift.Response, error) {
	var args GetValueArgs
	if err := args.FromWire(req.Body); err != nil {
		return nil, err
	}

	success, meta, err := k.impl.GetValue(ctx, req.Meta, args.Key)

	var result GetValueResult
	if err == nil {
		result.Success = &success
	} else if v, ok := err.(*ResourceDoesNotExist); ok {
		result.DoesNotExist = v
	} else {
		return nil, err
	}

	return &thrift.Response{Meta: meta, Body: result.ToWire()}, nil
}

func (k KeyValueHandler) SetValueHandler(ctx context.Context, req *thrift.Request) (*thrift.Response, error) {
	var args SetValueArgs
	if err := args.FromWire(req.Body); err != nil {
		return nil, err
	}

	meta, err := k.impl.SetValue(ctx, req.Meta, args.Key, args.Value)

	var result SetValueResult
	if err != nil {
		return nil, err
	}

	return &thrift.Response{Meta: meta, Body: result.ToWire()}, nil
}
