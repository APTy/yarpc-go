// Code generated by thriftrw-go and fixed by hand
// TODO: Replace with fully generated code

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package keyvalue

import (
	"fmt"

	"github.com/thriftrw/thriftrw-go/wire"
)

type ResourceDoesNotExist struct {
	Key     string
	Message *string
}

func (v *ResourceDoesNotExist) Error() string {
	return fmt.Sprintf("%q does not exist", v.Key)
}

func (v *ResourceDoesNotExist) ToWire() wire.Value {
	var fs [2]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueString(v.Key)}
	i++
	if v.Message != nil {
		fs[i] = wire.Field{ID: 2, Value: wire.NewValueString(*v.Message)}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}

func (v *ResourceDoesNotExist) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 1:
			if f.Value.Type() == wire.TBinary {
				v.Key, err = f.Value.GetString(), nil
				if err != nil {
					return err
				}
			}
		case 2:
			if f.Value.Type() == wire.TBinary {
				message := f.Value.GetString()
				v.Message, err = &message, nil
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func _ResourceDoesNotExist_Read(w wire.Value) (*ResourceDoesNotExist, error) {
	var v ResourceDoesNotExist
	err := v.FromWire(w)
	return &v, err
}

type GetValueArgs struct{ Key string }

func (v *GetValueArgs) ToWire() wire.Value {
	var fs [1]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueString(v.Key)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *GetValueArgs) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 1:
			if f.Value.Type() == wire.TBinary {
				v.Key, err = f.Value.GetString(), nil
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func _GetValueArgs_Read(w wire.Value) (*GetValueArgs, error) {
	var v GetValueArgs
	err := v.FromWire(w)
	return &v, err
}

type GetValueResult struct {
	DoesNotExist *ResourceDoesNotExist
	Success      *string
}

func (v *GetValueResult) ToWire() wire.Value {
	var fs [2]wire.Field
	i := 0
	if v.DoesNotExist != nil {
		fs[i] = wire.Field{ID: 2, Value: v.DoesNotExist.ToWire()}
		i++
	}
	if v.Success != nil {
		fs[i] = wire.Field{ID: 1, Value: wire.NewValueString(*v.Success)}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}

func (v *GetValueResult) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 2:
			if f.Value.Type() == wire.TStruct {
				v.DoesNotExist, err = _ResourceDoesNotExist_Read(f.Value)
				if err != nil {
					return err
				}
			}
		case 1:
			if f.Value.Type() == wire.TBinary {
				success := f.Value.GetString()
				v.Success, err = &success, nil
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func _GetValueResult_Read(w wire.Value) (*GetValueResult, error) {
	var v GetValueResult
	err := v.FromWire(w)
	return &v, err
}

type SetValueArgs struct {
	Key   string
	Value string
}

func (v *SetValueArgs) ToWire() wire.Value {
	var fs [2]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueString(v.Key)}
	i++
	fs[i] = wire.Field{ID: 2, Value: wire.NewValueString(v.Value)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}

func (v *SetValueArgs) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 1:
			if f.Value.Type() == wire.TBinary {
				v.Key, err = f.Value.GetString(), nil
				if err != nil {
					return err
				}
			}
		case 2:
			if f.Value.Type() == wire.TBinary {
				v.Value, err = f.Value.GetString(), nil
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func _SetValueArgs_Read(w wire.Value) (*SetValueArgs, error) {
	var v SetValueArgs
	err := v.FromWire(w)
	return &v, err
}

type SetValueResult struct{}

func (v *SetValueResult) ToWire() wire.Value {
	var fs [0]wire.Field
	i := 0
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *SetValueResult) FromWire(w wire.Value) error {
	return nil
}

func _SetValueResult_Read(w wire.Value) (*SetValueResult, error) {
	var v SetValueResult
	err := v.FromWire(w)
	return &v, err
}
