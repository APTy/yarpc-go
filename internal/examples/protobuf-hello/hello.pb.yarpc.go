// Code generated by protoc-gen-yarpc-go
// source: hello.proto
// DO NOT EDIT!

package hello

import (
	"context"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
)

// HelloWorldYARPCClient is the YARPC client-side interface for the HelloWorld service.
type HelloWorldYARPCClient interface {
	Hello(context.Context, *HelloRequest, ...yarpc.CallOption) (*HelloResponse, error)
}

// NewHelloWorldYARPCClient builds a new YARPC client for the HelloWorld service.
func NewHelloWorldYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) HelloWorldYARPCClient {
	return &_HelloWorldYARPCCaller{protobuf.NewClient(
		protobuf.ClientParams{
			ServiceName:  "hello.HelloWorld",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// HelloWorldYARPCServer is the YARPC server-side interface for the HelloWorld service.
type HelloWorldYARPCServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
}

// BuildHelloWorldYARPCProcedures prepares an implementation of the HelloWorld service for YARPC registration.
func BuildHelloWorldYARPCProcedures(server HelloWorldYARPCServer) []transport.Procedure {
	handler := &_HelloWorldYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "hello.HelloWorld",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "Hello",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.Hello,
							NewRequest: newHelloWorld_HelloYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
		},
	)
}

type _HelloWorldYARPCCaller struct {
	client protobuf.Client
}

func (c *_HelloWorldYARPCCaller) Hello(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (*HelloResponse, error) {
	responseMessage, err := c.client.Call(ctx, "Hello", request, newHelloWorld_HelloYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloWorld_HelloYARPCResponse, responseMessage)
	}
	return response, err
}

type _HelloWorldYARPCHandler struct {
	server HelloWorldYARPCServer
}

func (h *_HelloWorldYARPCHandler) Hello(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *HelloRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*HelloRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHelloWorld_HelloYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.Hello(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newHelloWorld_HelloYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloWorld_HelloYARPCResponse() proto.Message {
	return &HelloResponse{}
}

var (
	emptyHelloWorld_HelloYARPCRequest  = &HelloRequest{}
	emptyHelloWorld_HelloYARPCResponse = &HelloResponse{}
)

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) HelloWorldYARPCClient {
			return NewHelloWorldYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
