// Code generated by protoc-gen-yarpc-go
// source: internal/examples/protobuf/examplepb/example.proto
// DO NOT EDIT!

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package examplepb

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/yarpcproto"
)

var _ = ioutil.NopCloser

// KeyValueYARPCClient is the YARPC client-side interface for the KeyValue service.
type KeyValueYARPCClient interface {
	GetValue(context.Context, *GetValueRequest, ...yarpc.CallOption) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest, ...yarpc.CallOption) (*SetValueResponse, error)
}

// NewKeyValueYARPCClient builds a new YARPC client for the KeyValue service.
func NewKeyValueYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) KeyValueYARPCClient {
	return &_KeyValueYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.internal.examples.protobuf.example.KeyValue",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// KeyValueYARPCServer is the YARPC server-side interface for the KeyValue service.
type KeyValueYARPCServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
}

// BuildKeyValueYARPCProcedures prepares an implementation of the KeyValue service for YARPC registration.
func BuildKeyValueYARPCProcedures(server KeyValueYARPCServer) []transport.Procedure {
	handler := &_KeyValueYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.internal.examples.protobuf.example.KeyValue",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "GetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.GetValue,
							NewRequest: newKeyValueServiceGetValueYARPCRequest,
						},
					),
				},
				{
					MethodName: "SetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.SetValue,
							NewRequest: newKeyValueServiceSetValueYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

type _KeyValueYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_KeyValueYARPCCaller) GetValue(ctx context.Context, request *GetValueRequest, options ...yarpc.CallOption) (*GetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetValue", request, newKeyValueServiceGetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceGetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueYARPCCaller) SetValue(ctx context.Context, request *SetValueRequest, options ...yarpc.CallOption) (*SetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SetValue", request, newKeyValueServiceSetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceSetValueYARPCResponse, responseMessage)
	}
	return response, err
}

type _KeyValueYARPCHandler struct {
	server KeyValueYARPCServer
}

func (h *_KeyValueYARPCHandler) GetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceGetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_KeyValueYARPCHandler) SetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceSetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newKeyValueServiceGetValueYARPCRequest() proto.Message {
	return &GetValueRequest{}
}

func newKeyValueServiceGetValueYARPCResponse() proto.Message {
	return &GetValueResponse{}
}

func newKeyValueServiceSetValueYARPCRequest() proto.Message {
	return &SetValueRequest{}
}

func newKeyValueServiceSetValueYARPCResponse() proto.Message {
	return &SetValueResponse{}
}

var (
	emptyKeyValueServiceGetValueYARPCRequest  = &GetValueRequest{}
	emptyKeyValueServiceGetValueYARPCResponse = &GetValueResponse{}
	emptyKeyValueServiceSetValueYARPCRequest  = &SetValueRequest{}
	emptyKeyValueServiceSetValueYARPCResponse = &SetValueResponse{}
)

// SinkYARPCClient is the YARPC client-side interface for the Sink service.
type SinkYARPCClient interface {
	Fire(context.Context, *FireRequest, ...yarpc.CallOption) (yarpc.Ack, error)
}

// NewSinkYARPCClient builds a new YARPC client for the Sink service.
func NewSinkYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) SinkYARPCClient {
	return &_SinkYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.internal.examples.protobuf.example.Sink",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// SinkYARPCServer is the YARPC server-side interface for the Sink service.
type SinkYARPCServer interface {
	Fire(context.Context, *FireRequest) error
}

// BuildSinkYARPCProcedures prepares an implementation of the Sink service for YARPC registration.
func BuildSinkYARPCProcedures(server SinkYARPCServer) []transport.Procedure {
	handler := &_SinkYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName:        "uber.yarpc.internal.examples.protobuf.example.Sink",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{
				{
					MethodName: "Fire",
					Handler: protobuf.NewOnewayHandler(
						protobuf.OnewayHandlerParams{
							Handle:     handler.Fire,
							NewRequest: newSinkServiceFireYARPCRequest,
						},
					),
				},
			},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

type _SinkYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_SinkYARPCCaller) Fire(ctx context.Context, request *FireRequest, options ...yarpc.CallOption) (yarpc.Ack, error) {
	return c.streamClient.CallOneway(ctx, "Fire", request, options...)
}

type _SinkYARPCHandler struct {
	server SinkYARPCServer
}

func (h *_SinkYARPCHandler) Fire(ctx context.Context, requestMessage proto.Message) error {
	var request *FireRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*FireRequest)
		if !ok {
			return protobuf.CastError(emptySinkServiceFireYARPCRequest, requestMessage)
		}
	}
	return h.server.Fire(ctx, request)
}

func newSinkServiceFireYARPCRequest() proto.Message {
	return &FireRequest{}
}

func newSinkServiceFireYARPCResponse() proto.Message {
	return &yarpcproto.Oneway{}
}

var (
	emptySinkServiceFireYARPCRequest  = &FireRequest{}
	emptySinkServiceFireYARPCResponse = &yarpcproto.Oneway{}
)

// FooYARPCClient is the YARPC client-side interface for the Foo service.
type FooYARPCClient interface {
	HelloOut(context.Context, ...yarpc.CallOption) (FooServiceHelloOutYARPCClient, error)
	HelloIn(context.Context, *HelloRequest, ...yarpc.CallOption) (FooServiceHelloInYARPCClient, error)
	HelloBoth(context.Context, ...yarpc.CallOption) (FooServiceHelloBothYARPCClient, error)
}

// FooServiceHelloOutYARPCClient sends HelloRequests and receives the single HelloResponse when sending is done.
type FooServiceHelloOutYARPCClient interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	ResponseMeta() *transport.ResponseMeta
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
}

// FooServiceHelloInYARPCClient receives HelloResponses, returning io.EOF when the stream is complete.
type FooServiceHelloInYARPCClient interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	ResponseMeta() *transport.ResponseMeta
	Recv() (*HelloResponse, error)
}

// FooServiceHelloBothYARPCClient sends HelloRequests and receives HelloResponses, returning io.EOF when the stream is complete.
type FooServiceHelloBothYARPCClient interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	ResponseMeta() *transport.ResponseMeta
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	CloseSend() error
}

// NewFooYARPCClient builds a new YARPC client for the Foo service.
func NewFooYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) FooYARPCClient {
	return &_FooYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.internal.examples.protobuf.example.Foo",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// FooYARPCServer is the YARPC server-side interface for the Foo service.
type FooYARPCServer interface {
	HelloOut(FooServiceHelloOutYARPCServer) (*HelloResponse, error)
	HelloIn(*HelloRequest, FooServiceHelloInYARPCServer) error
	HelloBoth(FooServiceHelloBothYARPCServer) error
}

// FooServiceHelloOutYARPCServer receives HelloRequests.
type FooServiceHelloOutYARPCServer interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	SetResponseMeta(*transport.ResponseMeta)
	Recv() (*HelloRequest, error)
}

// FooServiceHelloInYARPCServer sends HelloResponses.
type FooServiceHelloInYARPCServer interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	SetResponseMeta(*transport.ResponseMeta)
	Send(*HelloResponse) error
}

// FooServiceHelloBothYARPCServer receives HelloRequests and sends HelloResponse.
type FooServiceHelloBothYARPCServer interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	SetResponseMeta(*transport.ResponseMeta)
	Recv() (*HelloRequest, error)
	Send(*HelloResponse) error
}

// BuildFooYARPCProcedures prepares an implementation of the Foo service for YARPC registration.
func BuildFooYARPCProcedures(server FooYARPCServer) []transport.Procedure {
	handler := &_FooYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName:         "uber.yarpc.internal.examples.protobuf.example.Foo",
			UnaryHandlerParams:  []protobuf.BuildProceduresUnaryHandlerParams{},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "HelloBoth",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloBoth,
						},
					),
				},

				{
					MethodName: "HelloIn",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloIn,
						},
					),
				},

				{
					MethodName: "HelloOut",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloOut,
						},
					),
				},
			},
		},
	)
}

type _FooYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_FooYARPCCaller) HelloOut(ctx context.Context, options ...yarpc.CallOption) (FooServiceHelloOutYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloOut", options...)
	if err != nil {
		return nil, err
	}
	return &_FooServiceHelloOutYARPCClient{stream: stream}, nil
}

func (c *_FooYARPCCaller) HelloIn(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (FooServiceHelloInYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloIn", options...)
	if err != nil {
		return nil, err
	}
	reader, closer, err := protobuf.ToReader(request, stream.RequestMeta().Encoding)
	if closer != nil {
		defer closer()
	}
	if err != nil {
		return nil, err
	}
	if err := stream.SendMsg(&transport.StreamMessage{ReadCloser: ioutil.NopCloser(reader)}); err != nil {
		return nil, err
	}
	return &_FooServiceHelloInYARPCClient{stream: stream}, nil
}

func (c *_FooYARPCCaller) HelloBoth(ctx context.Context, options ...yarpc.CallOption) (FooServiceHelloBothYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloBoth", options...)
	if err != nil {
		return nil, err
	}
	return &_FooServiceHelloBothYARPCClient{stream: stream}, nil
}

type _FooYARPCHandler struct {
	server FooYARPCServer
}

func (h *_FooYARPCHandler) HelloOut(serverStream transport.ServerStream) error {
	response, err := h.server.HelloOut(&_FooServiceHelloOutYARPCServer{serverStream: serverStream})
	if err != nil {
		return err
	}
	reader, closer, err := protobuf.ToReader(response, serverStream.RequestMeta().Encoding)
	if closer != nil {
		defer closer()
	}
	if err != nil {
		return err
	}
	return serverStream.SendMsg(&transport.StreamMessage{ReadCloser: ioutil.NopCloser(reader)})
}

func (h *_FooYARPCHandler) HelloIn(serverStream transport.ServerStream) error {
	src, err := serverStream.RecvMsg()
	if err != nil {
		return err
	}
	requestMessage, err := protobuf.ToProtoMessage(src, serverStream.RequestMeta().Encoding, newFooServiceHelloInYARPCRequest)
	if requestMessage == nil {
		return err
	}
	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return protobuf.CastError(emptyFooServiceHelloInYARPCRequest, requestMessage)
	}
	return h.server.HelloIn(request, &_FooServiceHelloInYARPCServer{serverStream: serverStream})
}

func (h *_FooYARPCHandler) HelloBoth(serverStream transport.ServerStream) error {
	return h.server.HelloBoth(&_FooServiceHelloBothYARPCServer{serverStream: serverStream})
}

type _FooServiceHelloOutYARPCClient struct {
	stream transport.ClientStream
}

func (c *_FooServiceHelloOutYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_FooServiceHelloOutYARPCClient) RequestMeta() *transport.RequestMeta {
	return c.stream.RequestMeta()
}

func (c *_FooServiceHelloOutYARPCClient) ResponseMeta() *transport.ResponseMeta {
	return c.stream.ResponseMeta()
}

func (c *_FooServiceHelloOutYARPCClient) Send(request *HelloRequest) error {
	reader, closer, err := protobuf.ToReader(request, c.stream.RequestMeta().Encoding)
	if closer != nil {
		defer closer()
	}
	if err != nil {
		return err
	}
	return c.stream.SendMsg(&transport.StreamMessage{ReadCloser: ioutil.NopCloser(reader)})
}

func (c *_FooServiceHelloOutYARPCClient) CloseAndRecv() (*HelloResponse, error) {
	if err := c.stream.Close(); err != nil {
		return nil, err
	}
	src, err := c.stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, c.stream.RequestMeta().Encoding, newFooServiceHelloOutYARPCResponse)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyFooServiceHelloOutYARPCResponse, responseMessage)
	}
	return response, err
}

type _FooServiceHelloInYARPCClient struct {
	stream transport.ClientStream
}

func (c *_FooServiceHelloInYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_FooServiceHelloInYARPCClient) RequestMeta() *transport.RequestMeta {
	return c.stream.RequestMeta()
}

func (c *_FooServiceHelloInYARPCClient) ResponseMeta() *transport.ResponseMeta {
	return c.stream.ResponseMeta()
}

func (c *_FooServiceHelloInYARPCClient) Recv() (*HelloResponse, error) {
	src, err := c.stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, c.stream.RequestMeta().Encoding, newFooServiceHelloInYARPCResponse)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyFooServiceHelloInYARPCResponse, responseMessage)
	}
	return response, err
}

type _FooServiceHelloBothYARPCClient struct {
	stream transport.ClientStream
}

func (c *_FooServiceHelloBothYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_FooServiceHelloBothYARPCClient) RequestMeta() *transport.RequestMeta {
	return c.stream.RequestMeta()
}

func (c *_FooServiceHelloBothYARPCClient) ResponseMeta() *transport.ResponseMeta {
	return c.stream.ResponseMeta()
}

func (c *_FooServiceHelloBothYARPCClient) Send(request *HelloRequest) error {
	reader, closer, err := protobuf.ToReader(request, c.stream.RequestMeta().Encoding)
	if closer != nil {
		defer closer()
	}
	if err != nil {
		return err
	}
	return c.stream.SendMsg(&transport.StreamMessage{ReadCloser: ioutil.NopCloser(reader)})
}

func (c *_FooServiceHelloBothYARPCClient) Recv() (*HelloResponse, error) {
	src, err := c.stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, c.stream.RequestMeta().Encoding, newFooServiceHelloBothYARPCResponse)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyFooServiceHelloBothYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_FooServiceHelloBothYARPCClient) CloseSend() error {
	return c.stream.Close()
}

type _FooServiceHelloOutYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_FooServiceHelloOutYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_FooServiceHelloOutYARPCServer) RequestMeta() *transport.RequestMeta {
	return s.serverStream.RequestMeta()
}

func (s *_FooServiceHelloOutYARPCServer) SetResponseMeta(responseMeta *transport.ResponseMeta) {
	s.serverStream.SetResponseMeta(responseMeta)
}

func (s *_FooServiceHelloOutYARPCServer) Recv() (*HelloRequest, error) {
	src, err := s.serverStream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, s.serverStream.RequestMeta().Encoding, newFooServiceHelloOutYARPCRequest)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyFooServiceHelloOutYARPCRequest, responseMessage)
	}
	return response, err
}

type _FooServiceHelloInYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_FooServiceHelloInYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_FooServiceHelloInYARPCServer) RequestMeta() *transport.RequestMeta {
	return s.serverStream.RequestMeta()
}

func (s *_FooServiceHelloInYARPCServer) SetResponseMeta(responseMeta *transport.ResponseMeta) {
	s.serverStream.SetResponseMeta(responseMeta)
}

func (s *_FooServiceHelloInYARPCServer) Send(response *HelloResponse) error {
	reader, closer, err := protobuf.ToReader(response, s.serverStream.RequestMeta().Encoding)
	if closer != nil {
		defer closer()
	}
	if err != nil {
		return err
	}
	return s.serverStream.SendMsg(&transport.StreamMessage{ReadCloser: ioutil.NopCloser(reader)})
}

type _FooServiceHelloBothYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_FooServiceHelloBothYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_FooServiceHelloBothYARPCServer) RequestMeta() *transport.RequestMeta {
	return s.serverStream.RequestMeta()
}

func (s *_FooServiceHelloBothYARPCServer) SetResponseMeta(responseMeta *transport.ResponseMeta) {
	s.serverStream.SetResponseMeta(responseMeta)
}

func (s *_FooServiceHelloBothYARPCServer) Recv() (*HelloRequest, error) {
	src, err := s.serverStream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, s.serverStream.RequestMeta().Encoding, newFooServiceHelloBothYARPCRequest)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyFooServiceHelloBothYARPCRequest, responseMessage)
	}
	return response, err
}

func (s *_FooServiceHelloBothYARPCServer) Send(response *HelloResponse) error {
	reader, closer, err := protobuf.ToReader(response, s.serverStream.RequestMeta().Encoding)
	if closer != nil {
		defer closer()
	}
	if err != nil {
		return err
	}
	return s.serverStream.SendMsg(&transport.StreamMessage{ReadCloser: ioutil.NopCloser(reader)})
}

func newFooServiceHelloOutYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newFooServiceHelloOutYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newFooServiceHelloInYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newFooServiceHelloInYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newFooServiceHelloBothYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newFooServiceHelloBothYARPCResponse() proto.Message {
	return &HelloResponse{}
}

var (
	emptyFooServiceHelloOutYARPCRequest   = &HelloRequest{}
	emptyFooServiceHelloOutYARPCResponse  = &HelloResponse{}
	emptyFooServiceHelloInYARPCRequest    = &HelloRequest{}
	emptyFooServiceHelloInYARPCResponse   = &HelloResponse{}
	emptyFooServiceHelloBothYARPCRequest  = &HelloRequest{}
	emptyFooServiceHelloBothYARPCResponse = &HelloResponse{}
)

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) KeyValueYARPCClient {
			return NewKeyValueYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) SinkYARPCClient {
			return NewSinkYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) FooYARPCClient {
			return NewFooYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
