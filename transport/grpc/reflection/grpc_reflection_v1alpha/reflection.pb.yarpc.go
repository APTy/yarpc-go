// Code generated by protoc-gen-yarpc-go
// source: grpc_reflection_v1alpha/reflection.proto
// DO NOT EDIT!

package grpc_reflection_v1alpha

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
)

var _ = ioutil.NopCloser

// ServerReflectionYARPCClient is the YARPC client-side interface for the ServerReflection service.
type ServerReflectionYARPCClient interface {
	ServerReflectionInfo(context.Context, ...yarpc.CallOption) (ServerReflectionServiceServerReflectionInfoYARPCClient, error)
}

// ServerReflectionServiceServerReflectionInfoYARPCClient sends ServerReflectionRequests and receives ServerReflectionResponses, returning io.EOF when the stream is complete.
type ServerReflectionServiceServerReflectionInfoYARPCClient interface {
	Context() context.Context
	Send(*ServerReflectionRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*ServerReflectionResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// NewServerReflectionYARPCClient builds a new YARPC client for the ServerReflection service.
func NewServerReflectionYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) ServerReflectionYARPCClient {
	return &_ServerReflectionYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "grpc.reflection.v1alpha.ServerReflection",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// ServerReflectionYARPCServer is the YARPC server-side interface for the ServerReflection service.
type ServerReflectionYARPCServer interface {
	ServerReflectionInfo(ServerReflectionServiceServerReflectionInfoYARPCServer) error
}

// ServerReflectionServiceServerReflectionInfoYARPCServer receives ServerReflectionRequests and sends ServerReflectionResponse.
type ServerReflectionServiceServerReflectionInfoYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*ServerReflectionRequest, error)
	Send(*ServerReflectionResponse, ...yarpc.StreamOption) error
}

// BuildServerReflectionYARPCProcedures prepares an implementation of the ServerReflection service for YARPC registration.
func BuildServerReflectionYARPCProcedures(server ServerReflectionYARPCServer) []transport.Procedure {
	handler := &_ServerReflectionYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName:         "grpc.reflection.v1alpha.ServerReflection",
			UnaryHandlerParams:  []protobuf.BuildProceduresUnaryHandlerParams{},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "ServerReflectionInfo",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							ReflectionInfo: protobuf.ReflectionInfo{
								ReflectionFileDescriptorBytes: fileDescriptor_reflection_178bd1e101bf8b63,
							},
							Handle: handler.ServerReflectionInfo,
						},
					),
				},
			},
		},
	)
}

// FxServerReflectionYARPCClientParams defines the input
// for NewFxServerReflectionYARPCClient. It provides the
// paramaters to get a ServerReflectionYARPCClient in an
// Fx application.
type FxServerReflectionYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxServerReflectionYARPCClientResult defines the output
// of NewFxServerReflectionYARPCClient. It provides a
// ServerReflectionYARPCClient to an Fx application.
type FxServerReflectionYARPCClientResult struct {
	fx.Out

	Client ServerReflectionYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxServerReflectionYARPCClient provides a ServerReflectionYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    grpc_reflection_v1alpha.NewFxServerReflectionYARPCClient("service-name"),
//    ...
//  )
func NewFxServerReflectionYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxServerReflectionYARPCClientParams) FxServerReflectionYARPCClientResult {
		return FxServerReflectionYARPCClientResult{
			Client: NewServerReflectionYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxServerReflectionYARPCProceduresParams defines the input
// for NewFxServerReflectionYARPCProcedures. It provides the
// paramaters to get ServerReflectionYARPCServer procedures in an
// Fx application.
type FxServerReflectionYARPCProceduresParams struct {
	fx.In

	Server ServerReflectionYARPCServer
}

// FxServerReflectionYARPCProceduresResult defines the output
// of NewFxServerReflectionYARPCProcedures. It provides
// ServerReflectionYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxServerReflectionYARPCProceduresResult struct {
	fx.Out

	Procedures []transport.Procedure `group:"yarpcfx"`
}

// NewFxServerReflectionYARPCProcedures provides ServerReflectionYARPCServer procedures to an Fx application.
// It expects a ServerReflectionYARPCServer to be present in the container.
//
//  fx.Provide(
//    grpc_reflection_v1alpha.NewFxServerReflectionYARPCProcedures(),
//    ...
//  )
func NewFxServerReflectionYARPCProcedures() interface{} {
	return func(params FxServerReflectionYARPCProceduresParams) FxServerReflectionYARPCProceduresResult {
		return FxServerReflectionYARPCProceduresResult{
			Procedures: BuildServerReflectionYARPCProcedures(params.Server),
		}
	}
}

type _ServerReflectionYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_ServerReflectionYARPCCaller) ServerReflectionInfo(ctx context.Context, options ...yarpc.CallOption) (ServerReflectionServiceServerReflectionInfoYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "ServerReflectionInfo", options...)
	if err != nil {
		return nil, err
	}
	return &_ServerReflectionServiceServerReflectionInfoYARPCClient{stream: stream}, nil
}

type _ServerReflectionYARPCHandler struct {
	server ServerReflectionYARPCServer
}

func (h *_ServerReflectionYARPCHandler) ServerReflectionInfo(serverStream *protobuf.ServerStream) error {
	return h.server.ServerReflectionInfo(&_ServerReflectionServiceServerReflectionInfoYARPCServer{serverStream: serverStream})
}

type _ServerReflectionServiceServerReflectionInfoYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_ServerReflectionServiceServerReflectionInfoYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_ServerReflectionServiceServerReflectionInfoYARPCClient) Send(request *ServerReflectionRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_ServerReflectionServiceServerReflectionInfoYARPCClient) Recv(options ...yarpc.StreamOption) (*ServerReflectionResponse, error) {
	responseMessage, err := c.stream.Receive(newServerReflectionServiceServerReflectionInfoYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ServerReflectionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyServerReflectionServiceServerReflectionInfoYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_ServerReflectionServiceServerReflectionInfoYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _ServerReflectionServiceServerReflectionInfoYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_ServerReflectionServiceServerReflectionInfoYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_ServerReflectionServiceServerReflectionInfoYARPCServer) Recv(options ...yarpc.StreamOption) (*ServerReflectionRequest, error) {
	requestMessage, err := s.serverStream.Receive(newServerReflectionServiceServerReflectionInfoYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*ServerReflectionRequest)
	if !ok {
		return nil, protobuf.CastError(emptyServerReflectionServiceServerReflectionInfoYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_ServerReflectionServiceServerReflectionInfoYARPCServer) Send(response *ServerReflectionResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newServerReflectionServiceServerReflectionInfoYARPCRequest() proto.Message {
	return &ServerReflectionRequest{}
}

func newServerReflectionServiceServerReflectionInfoYARPCResponse() proto.Message {
	return &ServerReflectionResponse{}
}

var (
	emptyServerReflectionServiceServerReflectionInfoYARPCRequest  = &ServerReflectionRequest{}
	emptyServerReflectionServiceServerReflectionInfoYARPCResponse = &ServerReflectionResponse{}
)

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) ServerReflectionYARPCClient {
			return NewServerReflectionYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
